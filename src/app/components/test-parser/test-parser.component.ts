import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AnalysisDataService } from '../../services/analysis-data.service';

@Component({
  selector: 'app-test-parser',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="test-container">
      <h2>üß™ Test du Parser JSON</h2>

      <div class="test-actions">
        <button (click)="testWithYourData()" class="test-btn">
          Tester avec vos donn√©es
        </button>
        <button (click)="testWithDifferentFormats()" class="test-btn">
          Tester diff√©rents formats
        </button>
        <button (click)="clearResults()" class="clear-btn">Effacer</button>
      </div>

      <div class="results" *ngIf="testResults.length > 0">
        <h3>R√©sultats du test</h3>
        <div
          class="result-item"
          *ngFor="let result of testResults; let i = index"
        >
          <div class="result-header">
            <span class="result-index">{{ i + 1 }}</span>
            <span class="result-title">{{ result.title }}</span>
            <span
              class="result-status"
              [class.success]="result.success"
              [class.error]="!result.success"
            >
              {{ result.success ? '‚úÖ' : '‚ùå' }}
            </span>
          </div>
          <div class="result-content">
            <pre>{{ result.content }}</pre>
          </div>
        </div>
      </div>

      <div class="instructions">
        <h3>Instructions</h3>
        <p>
          Ce composant teste la logique de parsing pour s'assurer que les
          donn√©es JSON sont correctement s√©par√©es en sections.
        </p>
        <p>
          Cliquez sur "Tester avec vos donn√©es" pour utiliser l'exemple que vous
          avez fourni.
        </p>
      </div>
    </div>
  `,
  styles: [
    `
      .test-container {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
      }

      .test-actions {
        margin-bottom: 20px;
        display: flex;
        gap: 10px;
      }

      .test-btn {
        background: rgb(0, 174, 141);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
      }

      .test-btn:hover {
        background: rgba(0, 174, 141, 0.8);
      }

      .clear-btn {
        background: #dc3545;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
      }

      .clear-btn:hover {
        background: #c82333;
      }

      .results {
        margin-top: 20px;
      }

      .result-item {
        margin-bottom: 15px;
        border: 1px solid #ddd;
        border-radius: 4px;
        overflow: hidden;
      }

      .result-header {
        background: #f8f9fa;
        padding: 10px;
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .result-index {
        background: rgb(0, 174, 141);
        color: white;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 0.8em;
        font-weight: bold;
      }

      .result-title {
        flex: 1;
        font-weight: bold;
      }

      .result-status.success {
        color: #28a745;
      }

      .result-status.error {
        color: #dc3545;
      }

      .result-content {
        padding: 10px;
        background: white;
      }

      .result-content pre {
        margin: 0;
        white-space: pre-wrap;
        word-wrap: break-word;
        font-family: 'Courier New', monospace;
        font-size: 0.9em;
        max-height: 200px;
        overflow-y: auto;
      }

      .instructions {
        margin-top: 30px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 4px;
      }

      .instructions h3 {
        margin-top: 0;
        color: rgb(0, 174, 141);
      }
    `,
  ],
})
export class TestParserComponent implements OnInit {
  testResults: Array<{ title: string; content: string; success: boolean }> = [];

  constructor(private analysisDataService: AnalysisDataService) {}

  ngOnInit(): void {}

  testWithYourData(): void {
    // Test avec le format exact que vous avez fourni
    const yourApiFormat = `{"Titre": "Formation des utilisateurs",
    "Paragraphe": "Une formation approfondie pour les utilisateurs responsables de la gestion du courrier entrant et sortant est requise, ainsi que des supports p√©dagogiques en fran√ßais.",
    "Sp√©cifications d√©tect√©es": "Oui",
    "Besoins exprim√©s": "Accompagner les utilisateurs dans la gestion du courrier entrant et sortant",
    "Conditions": "Utilisateurs responsables identifi√©s",
    "R√®gles": "N/A",
    "Contraintes": "N/A",
    "Modalit√©s": "Formation approfondie avec supports p√©dagogiques en fran√ßais",
    "R√©sum√©": "Une formation approfondie avec supports p√©dagogiques en fran√ßais est requise pour les utilisateurs responsables de la gestion du courrier entrant et sortant."
}

{
    "Titre": "√âvaluation des co√ªts",
    "Paragraphe": "La solution logicielle doit √™tre livr√©e cl√© en main, compatible avec l'√©quipement informatique existant, inclure √©ventuellement un √©quipement compl√©mentaire pour le scan du courrier entrant, et fournir une √©valuation des co√ªts associ√©s.",
    "Sp√©cifications d√©tect√©es": "Oui",
    "Besoins exprim√©s": "Estimation des co√ªts associ√©s √† la solution logicielle",
    "Conditions": "Compatibilit√© avec l'√©quipement informatique existant",
    "R√®gles": "N/A",
    "Contraintes": "N/A",
    "Modalit√©s": "Fournir une √©valuation des co√ªts associ√©s √† la solution logicielle",
    "R√©sum√©": "La solution logicielle doit inclure une √©valuation des co√ªts, √™tre compatible avec l'√©quipement existant et potentiellement fournir un √©quipement compl√©mentaire pour le scan du courrier entrant."
}`;

    console.log(
      'üß™ Test avec votre format sp√©cifique (objets s√©par√©s par des retours √† la ligne)'
    );
    this.simulateApiResponse(yourApiFormat);
  }

  testWithDifferentFormats(): void {
    const formats = [
      // Format 1: Array simple
      [
        { name: 'Test 1', value: 'Value 1' },
        { name: 'Test 2', value: 'Value 2' },
      ],

      // Format 2: Objet unique
      { name: 'Single Object', description: 'This is a single object test' },

      // Format 3: String JSON
      '[{"title": "String JSON 1"}, {"title": "String JSON 2"}]',

      // Format 4: String avec objets s√©par√©s
      '{"title": "Object 1"},{"title": "Object 2"}',
    ];

    formats.forEach((format, index) => {
      console.log(`Testing format ${index + 1}:`, format);
      this.simulateApiResponse(format);
    });
  }

  private simulateApiResponse(data: any): void {
    // Simulate the API response structure
    const mockResponse = {
      data: {
        outputs: {
          Sortie: data,
        },
      },
    };

    // Test the parsing logic
    try {
      const result = this.parseApiResponse(mockResponse);

      this.testResults.push({
        title: `Test r√©ussi - ${result.arrayItems.length} √©l√©ments trouv√©s`,
        content: `completeRes: ${result.completeRes.substring(
          0,
          200
        )}...\n\narrayRes (${
          result.arrayItems.length
        } √©l√©ments):\n${result.arrayItems
          .map((item, i) => `[${i}]: ${item.substring(0, 100)}...`)
          .join('\n')}`,
        success: true,
      });
    } catch (error) {
      this.testResults.push({
        title: `Test √©chou√© - ${error}`,
        content: `Erreur: ${error}\nDonn√©es: ${JSON.stringify(data, null, 2)}`,
        success: false,
      });
    }
  }

  private parseApiResponse(response: any): {
    completeRes: string;
    arrayItems: string[];
  } {
    const sortieValue = response?.data?.outputs?.Sortie;

    if (!sortieValue) {
      throw new Error('Pas de donn√©es Sortie trouv√©es');
    }

    const completeRes = JSON.stringify(sortieValue, null, 2);
    let arrayItems: string[] = [];

    if (Array.isArray(sortieValue)) {
      // If it's already an array, convert each element to JSON string
      arrayItems = sortieValue.map((item) => JSON.stringify(item, null, 2));
    } else if (typeof sortieValue === 'string') {
      // Try to parse as JSON first
      try {
        const parsedValue = JSON.parse(sortieValue);
        if (Array.isArray(parsedValue)) {
          arrayItems = parsedValue.map((item) => JSON.stringify(item, null, 2));
        } else {
          arrayItems = [JSON.stringify(parsedValue, null, 2)];
        }
      } catch (parseError) {
        // If it's not valid JSON, try splitting
        arrayItems = this.splitStringIntoObjects(sortieValue);
      }
    } else if (typeof sortieValue === 'object' && sortieValue !== null) {
      // If it's a single object, put it in an array
      arrayItems = [JSON.stringify(sortieValue, null, 2)];
    } else {
      // Fallback
      arrayItems = [JSON.stringify(sortieValue)];
    }

    return { completeRes, arrayItems };
  }

  private splitStringIntoObjects(value: string): string[] {
    // Try to split on patterns where } is followed by {
    if (value.includes('}{') || value.includes('},{')) {
      let normalizedValue = value.replace(/}\s*,?\s*(\r?\n)*\s*{/g, '},{');

      return normalizedValue.split('},{').map((item, index, array) => {
        let result = item.trim();

        if (index === 0 && !result.startsWith('{')) {
          result = '{' + result;
        }
        if (index === array.length - 1 && !result.endsWith('}')) {
          result = result + '}';
        }
        if (index > 0 && index < array.length - 1) {
          if (!result.startsWith('{')) {
            result = '{' + result;
          }
          if (!result.endsWith('}')) {
            result = result + '}';
          }
        }

        try {
          const parsed = JSON.parse(result);
          return JSON.stringify(parsed, null, 2);
        } catch (jsonError) {
          return result;
        }
      });
    } else {
      return [value];
    }
  }

  clearResults(): void {
    this.testResults = [];
  }
}
